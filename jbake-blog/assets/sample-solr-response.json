{
    "responseHeader": {
        "status": 0,
        "QTime": 3,
        "params": {
            "q": "*:*",
            "_": "1572110726768"
        }
    },
    "response": {
        "numFound": 6,
        "start": 0,
        "docs": [
            {
                "id": "create-your-mockito.ArgumentMatcher",
                "url": "/blog/2019/create-your-mockito.ArgumentMatcher.html",
                "title": "create your mockito.ArgumentMatcher",
                "description": "",
                "reducedText": "= Create your mockito.ArgumentMatcher\nAlbert Lacambra Basil\n//:description: A basic usage of jms\n\nWhen testing you usually need to mock. I mock mostly using Mockito and usually, I stub using when and verify calls using verify.",
                "text": "= Create your mockito.ArgumentMatcher\nAlbert Lacambra Basil\n//:description: A basic usage of jms\n\nWhen testing you usually need to mock. I mock mostly using Mockito and usually, I stub using when and verify calls using verify.\n\nNormally you will want to verify that a given method has called with specific parameters or that a mocked method returns the desired value only when called also with specific parameters.\n\nIn the following class, an article is the same if its id is the same. We can, however, be interested in match the article using its contents (tile and text) instead of its database id.\n\n[source ,java]\n--\n\npublic class Article {\nprivate int id;\nprivate String title;\nprivate String text;\n\npublic Article(int id, String title, String text) {\nthis.id = id;\nthis.title = title;\nthis.text = text;\n}\n\npublic int getId() {\nreturn id;\n}\n\npublic String getTitle() {\nreturn title;\n}\n\npublic String getText() {\nreturn text;\n}\n\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nArticle article = (Article) o;\nreturn id == article.id;\n}\n\n@Override\npublic int hashCode() {\nreturn Objects.hash(id);\n}\n}\n--\n\nUsually, it is enough to use the Mocikto.eq() ArgumentMatcher that will use the Object.equals() method.\n\n[source,java]\n--\nMockito.verify(publication).addArticle(Mockito.eq(article));\n--\n\nHowever, if we want to match against its contents, we need a new matcher “ArticleMatcher” that compares title and text. Therefore, I will just create a **class ArticleMatcher implements ArgumentMatcher**\n\n[source,java]\n--\nclass ArticleMatcher implements ArgumentMatcher\n<Article> {\n\npublic final Article article;\n\n/**\n* register our matcher.\n*/\npublic static Article eq(Article article) {\nmockingProgress().getArgumentMatcherStorage().reportMatcher(new ArticleMatcher(article));\nreturn null;\n}\n\npublic ArticleMatcher(Article article) {\nthis.article = article;\n}\n\n/**\n* Implements matches method with our matching logic.\n* @param article\n* @return\n*/\n@Override\npublic boolean matches(Article article) {\nreturn this.article.getText().equalsIgnoreCase(article.getText());\n}\n\npublic String toString() {\nreturn \"<ArticleMatcher>\";\n}\n}\n--\n\nNow we can use our ArgumentMutcher to create stubs and verify calls:\n\n[source, java]\n--\nclass ArticleTest {\n\n@Test\nvoid checkVerify() {\n\nArticle article1 = new Article(1, \"someText\", \"title\");\nArticle article2 = new Article(2, \"someText\", \"title\");\nArticle article3 = new Article(3, \"someText\", \"title\");\n\nPublication publication = Mockito.spy(Publication.class);\npublication.addArticle(article1);\n\nMockito.verify(publication).addArticle(ArticleMatcher.eq(article2));\nMockito.verify(publication, Mockito.times(0)).addArticle(Mockito.eq(article3));\n\n}\n\n@Test\nvoid checkStub() {\n\nArticle article1 = new Article(1, \"someText\", \"title\");\nArticle article2 = new Article(2, \"someText\", \"title\");\nArticle article3 = new Article(3, \"someText\", \"title\");\n\nPublication publication = Mockito.spy(Publication.class);\nMockito.when(publication.getArticlesLike(ArticleMatcher.eq(article2))).thenReturn(Arrays.asList(article1, article2));\n\nList<Article> articles = publication.getArticlesLike(article3);\nAssertions.assertEquals(2, articles.size());\nAssertions.assertTrue(articles.contains(article1));\nAssertions.assertTrue(articles.contains(article2));\nAssertions.assertFalse(articles.contains(article3));\n}\n}\n--",
                "date": "2019-05-06"
            },
            {
                "id": "id",
                "url": "/blog/2019/templ.html",
                "title": "new tile",
                "description": "A basic usage of jms",
                "reducedText": "= Title\nAlbert Lacambra Basil",
                "text": "= Title\nAlbert Lacambra Basil",
                "date": "2019-02-01"
            },
            {
                "id": "create-solr-project-oc",
                "url": "/blog/2019/create-solr-project-oc.html",
                "title": "solr",
                "description": "",
                "reducedText": "= Solr config\nAlbert Lacambra Basil\n//:description: A basic usage of jms\n\n",
                "text": "= Solr config\nAlbert Lacambra Basil\n//:description: A basic usage of jms\n\n\n== Create docker file\n\n[source,dockerfile]\n--\nFROM solr:8.2.0\n\nMAINTAINER  Albert Lacambra Basil \"albert@lacambra.tech\"\nUSER root\nENV STI_SCRIPTS_PATH=/usr/libexec/s2i\n\nLABEL io.k8s.description=\"Run SOLR search in OpenShift\" \\\nio.k8s.display-name=\"SOLR 6.6\" \\\nio.openshift.expose-services=\"8983:http\" \\\nio.openshift.tags=\"builder,solr,solr8.2.0\" \\\nio.openshift.s2i.scripts-url=\"image:///${STI_SCRIPTS_PATH}\"\n\nCOPY ./s2i/bin/. ${STI_SCRIPTS_PATH}\nRUN chmod -R a+rx ${STI_SCRIPTS_PATH}\n\n# If we need to add files as part of every SOLR conf, they'd go here\n# COPY ./solr-config/ /tmp/solr-config\n# Give the SOLR directory to root group (not root user)\n# https://docs.openshift.org/latest/creating_images/guidelines.html#openshift-origin-specific-guidelines\n\nRUN chgrp -R 0 /opt/solr \\\n&& chmod -R g+rwX /opt/solr\n\nRUN chgrp -R 0 /opt/docker-solr \\\n&& chmod -R g+rwX /opt/docker-solr\n\nUSER 8983\n--\n\n== Build Dockerimage\n\n[source, bash]\n--\n#!/bin/bash\nSCRIPT_DIR=$(dirname $0)\n\ndocker build -t 'alacambra/openshift-solr:8.2.0' -f ${SCRIPT_DIR}/Dockerfile ${SCRIPT_DIR}\n--\n\n== Import ImageStream\n\n[source, bash]\n--\noc import-image s2i-solr --from=\"alacambra/openshift-solr:8.2.0\" --confirm\n--\n\n== Create App\n\n[source, bash]\n--\noc new-app s2i-solr:8.2.0~/. --name=solr-blog\n--\n\n== Reabuild app\n\n[source, bash]\n--\noc start-build --from-dir . solr-blog\n--\n\n== After update docker file or s2i scripts\n[source, bash]\n--\n./build.sh && \\\ndocker push alacambra/openshift-solr:8.2.0 && \\\noc import-image s2i-solr --from=\"alacambra/openshift-solr:8.2.0\" --confirm && \\\noc start-build --from-dir ./solr/ solr-blog\n--\n\n== Send a query request\n--\ncurl http://solr-blog-blog.apps.oc.lacambra/solr/blog-solr/query?q=a\n--\n\nResponse body:\n[source, json]\n--\n{\n\"responseHeader\":{\n\"status\":0,\n\"QTime\":34,\n\"params\":{\n\"q\":\"a\"\n}\n},\n\"response\":{\n\"numFound\":0,\n\"start\":0,\n\"docs\":[\n]\n}\n}\n--",
                "date": "2019-05-06"
            },
            {
                "id": "json-pinter-made-easy",
                "url": "/blog/2019/json-pointer.html",
                "title": "The JsonPointer. Json make easy",
                "description": "",
                "reducedText": "= The JsonPointer. Json make easy\nAlbert Lacambra Basil\n\n\n",
                "date": "2019-05-19",
                "text": "= The JsonPointer. Json make easy\nAlbert Lacambra Basil\n\n\n\nSince Java API for JSON Processing  (JSR 374) version 1.1, it is possible to use JosnPointer.\n\nJsonPointer is a specification of link:https://tools.ietf.org/html/rfc6901[rfc6901] and as we can read on it, JSON Pointer defines a string syntax for identifying a specific value\nwithin a JavaScript Object Notation (JSON) document.\nIn other words, it is possible now to evaluate and change values from our JsonObjects using a pointer string instead to go through the whole chain of calls and recreating an object builder at the end.\n\nSo instead of that:\n--\n[source,java]\nString nameWithObject = jsonObject.getJsonArray(\"user_mentions\").getJsonObject(0).getString(\"name\");\n--\n\nwe can do that:\n\n--\n[source,java]\nString nameWithPointer = ((JsonString)Json.createPointer(\"/user_mentions/\n--\n\nWe can easily see, that the use of pointers make easier to know which element we are fetching and more intuitive to write.\nHowever, since the pointer is returning a JsonValue, we need to use a cast to be able to fetch the final value.\n\nWhy JsonPointer is not providing methods to directly get java types like JsonObject is doing, is something I do not really know.\n\n*So, what can we do with the JSON pointer?*\n\nWe can not only get values from a JsonStructure using pointer notation but also modify the object without the need to reconvert it into its builder equivalent. So specifically we can:\n\n* add a value to a JsonStructure\n* check if a value is contained into a JsonStructure\n* remove a value from a jsonStructure\n* replace a value into a JsonStructre\n\nLet’s see some examples. For the examples, I will use the the following json object:\n--\n[source, json]\n{\n\"id\":1,\n\"user\":{\n\"name\":\"some-name\",\n\"lastname\":\"some-lastname\"\n},\n\"user_mentions\":[\n{\n\"name\":\"Twitter API\",\n\"indices\":[\n4,\n15\n],\n\"screen_name\":\"twitterapi\",\n\"id\":6253282,\n\"id_str\":\"6253282\"\n}\n]\n}\n--\n\n--\n[source,java]\n.Get a simple value from an object:\nJsonNumber id = ((JsonNumber) Json.createPointer(\"/id\").getValue(example));\n--\n\n--\n[source,java]\n.Get an object from an object.\nJsonObject user = Json.createPointer(\"/user\").getValue(example).asJsonObject();\n--\n\n--\n[source,java]\n.get an array from an object\nJsonArray userMentions = Json.createPointer(\"/user_mentions\").getValue(example).asJsonArray();\n--\n\n--\n[source,java]\n.get an element from an array\nJsonObject mention = Json.createPointer(\"/user_mentions/0\").getValue(example).asJsonObject();\nString mentionName = ((JsonString) Json.createPointer(\"/user_mentions/0/name\").getValue(example)).getString();\nint mentionIndex0 = ((JsonNumber) Json.createPointer(\"/user_mentions/0/indices/1\").getValue(example)).intValue();\n--\n\n--\n[source,java]\n.check if an object contains an element\nAssertions.assertTrue(Json.createPointer(\"/id\").containsValue(example));\nAssertions.assertTrue(Json.createPointer(\"/user_mentions/0/indices/0\").containsValue(example));\nAssertions.assertTrue(Json.createPointer(\"/user_mentions/0/indices/1\").containsValue(example));\nAssertions.assertFalse(Json.createPointer(\"/user_mentions/0/indices/2\").containsValue(example));\n--\n\n--\n[source,java]\n.Add a simple value\nJsonObject extendedExample = Json.createPointer(\"/timestamp\").add(example, Json.createValue(System.currentTimeMillis()));\nAssertions.assertTrue(Json.createPointer(\"/timestamp\").containsValue(extendedExample));\n--\n\n--\n[source,java]\n.Add an element to a JsonArray. The pointer must point to the last_element + 1 index. Empty elements would produce an error.\nextendedExample = Json.createPointer(\"/user_mentions/0/indices/2\").add(extendedExample, Json.createValue(30));\nAssertions.assertEquals(30, ((JsonNumber) Json.createPointer(\"/user_mentions/0/indices/2\").getValue(extendedExample)).intValue());\n--\n\n--\n[source,java]\n.Replace elements\nexample = Json.createPointer(\"/id\").replace(example, Json.createValue(2));\nAssertions.assertEquals(2, example.getInt(\"id\"));\nexample = Json.createPointer(\"/user_mentions/0/indices/1\").replace(example, Json.createValue(9999));\nAssertions.assertEquals(9999, ((JsonNumber) Json.createPointer(\"/user_mentions/0/indices/1\").getValue(example)).intValue());\n--\n\n--\n[source,java]\n.Remove elements\nexample = Json.createPointer(\"/id\").remove(example);\nAssertions.assertFalse(example.containsKey(\"id\"));\n--\n\nSource code on link:https://github.com/alacambra/blogs-posts-code/blob/master/json-patch-and-pointer/src/test/java/json_patch_and_pointer/PatchAndPointer.java[github]"
            },
            {
                "id": "thinwars-with-wildfly",
                "url": "/blog/2019/thinwars-with-wildfly.html",
                "title": "ThinWar with Widlfy",
                "description": "Create thin wars with wildfly. Ship dependencies with the application servers.",
                "reducedText": "= ThinWar with Widlfy\nAlbert Lacambra Basil\n\nI have heard the concept of ThinWars several years before in one of the airhacks workshop from Adam Bien.\n",
                "text": "= ThinWar with Widlfy\nAlbert Lacambra Basil\n\nI have heard the concept of ThinWars several years before in one of the airhacks workshop from Adam Bien.\n\nBasically, the idea is that in any project packaged into a war should contain only business logic. No jar dependencies should be packaged with the business code. That reduces drastically the size of the final war file, improving build, package, delivery and start-up times.\n\nSo, to be able to remove all dependencies from our war artifact, we need to change the scope from compiled to provided, and then add those dependencies directly to our application server.\nIn a naive first approach, I have tried just to add those dependencies to the java classpath. However, the wildfly’s class loading is much more complex than that.\n\nTo add new dependencies into the Widlfly application server, we need to add them creating a new module. That means that we must create a new module.xml file, declaring included jars and dependencies.\n\nSo, to create a new module we must follow the next steps.\n\n* Create the module directory:\n--\n[source,bash]\nmkdir -p $JBOSS_HOME/modules/my/module/name/main\n--\n\n* Create a module.xml file with including our depenedencies. Required jars can be directly downloaded form https://mvnrepository.com\n\n//.module configuration\n--\n[source,xml]\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module xmlns=\"urn:jboss:module:1.1\" name=\"my.module.name\">\n<resources>\n<resource-root path=\"{my-dependency-jar1.jar}\" />\n<resource-root path=\"{my-dependency-jar2.jar}\" />\n</resources>\n</module>\n--\n\n* Declare the module as a global module into settings.xml so that it can be used by any deployed application. Under the <subsystem> section add:\n--\n[source,xml]\n<global-modules>\n<modulename=\"my.module.name\"slot=\"main\"/>\n</global-modules>\n--",
                "date": "2019-06-28"
            },
            {
                "id": "static-blog-with-openshift",
                "url": "/blog/2019/static-blog-with-openshift.html",
                "title": "",
                "description": "Create your static blog with jbake and openshift",
                "reducedText": "= Build and deploy static blog in Openshift\nAlbert Lacambra Basil",
                "text": "= Build and deploy static blog in Openshift\nAlbert Lacambra Basil",
                "date": ""
            }
        ]
    }
}